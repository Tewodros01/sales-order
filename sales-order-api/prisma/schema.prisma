// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


//--------------------
// Enums
//--------------------

enum AccountType {
  AccountsPayable
  AccountsReceivable
  AccumulatedDepreciation
  CashAtBank
  CashOnHand
  CostOfSales
  EquityDoesNotClose
  EquityGetsClosed
  EquityRetainedEarnings
  Expenses
  FixedAssets
  Income
  Inventory
  LongTermLiabilities
  OtherAssets
  OtherCurrentAssets
  OtherCurrentLiabilities
  OtherIncome
}

enum TransactionType {
  GOODS
  SERVICES
}

enum TransactionOrigin {
  LOCAL
  IMPORTED
}

enum ShipVia {
  CUSTOMER_VEHICLE
  COMPANY_VEHICLE
}

enum SalesOrderStatus {
  DRAFT
  SUBMITTED
}

enum TaxParty {
  VENDOR
  CUSTOMER
}

//--------------------
// Models
//--------------------

model Customer {
  id          String        @id @default(uuid())    // UUID as primary key for uniqueness
  name        String        // Customer's full name
  email       String?       // Optional email, nullable if no email exists
  salesOrders SalesOrder[]  // One-to-many relation with SalesOrders

  // Ensure email uniqueness and indexing for performance
  @@unique([email])
}

model Account {
  id             String       @id @default(uuid())    // UUID as primary key
  accountNumber  String       @unique                 // Unique account number
  title          String       // Account title
  type           AccountType  // Type of account (Payable, Receivable, etc.)
  inactive       Boolean      @default(false)         // Boolean flag for inactive accounts

  isAR           Boolean      @default(false)         // Indicates if it’s an AR account
  isGL           Boolean      @default(false)         // Indicates if it’s a GL account

  salesOrders    SalesOrder[] // Relation with SalesOrders
  lineItems      SalesOrderLineItem[] // Relation with SalesOrderLineItems
  taxes          Tax[]        // Relation with taxes for this account

  // Indexing for AR and GL accounts
  @@index([isAR, isGL])
}

model InventoryItem {
  id          String      @id @default(uuid())  // UUID as primary key
  sku         String      @unique                 // Unique SKU for inventory item
  name        String      // Name of the item
  description String      // Description of the item
  unitPrice   Decimal     @db.Decimal(10, 2)      // Precision for monetary values
  lineItems   SalesOrderLineItem[] // Relation with SalesOrderLineItems

  @@index([sku]) // Index on SKU for quick lookup
}

model SalesOrder {
  id                    String       @id @default(cuid())  // Only id should be AUTO_INCREMENT
  soNumber              String

  customerId            String?      // Nullable to support one-time customer
  customer              Customer?    @relation(fields: [customerId], references: [id])
  oneTimeCustomerName   String?      // Support for one-time customers

  date                  DateTime     @default(now())           // Timestamp of when the order was created
  customerPO            String?      // Customer purchase order reference

  arAccountId           String      // Foreign key to AR Account
  arAccount             Account     @relation(fields: [arAccountId], references: [id], onDelete: Cascade) // Cascade delete AR account

  shipBy                DateTime?    // Expected shipping date
  transactionType       TransactionType
  transactionOrigin     TransactionOrigin?
  shipVia               ShipVia?

  status                SalesOrderStatus   @default(DRAFT)  // Default status is DRAFT
  lineItems             SalesOrderLineItem[] // SalesOrderLineItems relation

  totalAmount           Decimal      @db.Decimal(10, 2)      // Total amount for the sales order
  createdAt             DateTime     @default(now())           // Timestamp of when the order was created
  updatedAt             DateTime     @updatedAt                 // Timestamp of when the order was last updated

  @@index([customerId, arAccountId, status]) // Indexing for performance optimization
}

model SalesOrderLineItem {
  id              String        @id @default(uuid())      // UUID as primary key
  salesOrderId    String       // Foreign key to SalesOrder
  salesOrder      SalesOrder   @relation(fields: [salesOrderId], references: [id], onDelete: Cascade) // Cascade delete SalesOrder

  quantity        Int          // Quantity of the item
  shipped         Int          @default(0)                // Quantity of items shipped

  inventoryItemId String?      // Nullable, in case the item is untracked
  inventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade) // Cascade delete InventoryItem

  description     String       // Description of the line item
  unitPrice       Decimal      @db.Decimal(10, 2)          // Unit price of the item
  glAccountId     String       // Foreign key to GL Account
  glAccount       Account      @relation(fields: [glAccountId], references: [id], onDelete: Cascade) // Cascade delete GL Account

  taxId           String?      // Foreign key to Tax for this line item
  tax             Tax?         @relation(fields: [taxId], references: [id], onDelete: Cascade) // Cascade delete Tax

  project         String?      // Optional project field
  phase           String?      // Optional phase field

  amount          Decimal      @db.Decimal(10, 2)          // Total amount for this line item

  @@index([salesOrderId, glAccountId, inventoryItemId]) // Index for fast retrieval
}


model Tax {
  id                  String        @id @default(uuid())       // UUID as primary key
  taxType             String       // Type of tax (e.g., VAT)
  rate                Decimal      @db.Decimal(5, 2)          // Tax rate (percentage)
  taxAuthorityName    String?      // Optional tax authority name
  vendorOrCustomer    TaxParty     // Tax applies to vendor or customer
  vendorTaxOffice     String?      // Vendor tax office (optional)

  glAccountId         String       // Foreign key to GL Account
  glAccount           Account      @relation(fields: [glAccountId], references: [id], onDelete: Cascade) // Cascade delete GL Account

  lineItems           SalesOrderLineItem[] // Relation with SalesOrderLineItems

  @@index([taxType, glAccountId]) // Index for quick lookups
}
