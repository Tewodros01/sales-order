// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum AccountType {
  AccountsPayable
  AccountsReceivable
  AccumulatedDepreciation
  CashAtBank
  CashOnHand
  CostOfSales
  EquityDoesNotClose
  EquityGetsClosed
  EquityRetainedEarnings
  Expenses
  FixedAssets
  Income
  Inventory
  LongTermLiabilities
  OtherAssets
  OtherCurrentAssets
  OtherCurrentLiabilities
  OtherIncome
}

enum TransactionType {
  GOODS
  SERVICES
}

enum TransactionOrigin {
  LOCAL
  IMPORTED
}

enum ShipVia {
  CUSTOMER_VEHICLE
  COMPANY_VEHICLE
}

enum SalesOrderStatus {
  DRAFT
  SUBMITTED
}

enum TaxParty {
  VENDOR
  CUSTOMER
}

model Customer {
  id          String        @id @default(uuid())
  name        String
  email       String?
  salesOrders SalesOrder[]

  // Ensure email uniqueness and indexing for performance
  @@unique([email])
}

model Account {
  id             String       @id @default(uuid())
  accountNumber  String       @unique
  title          String
  type           AccountType
  inactive       Boolean      @default(false)

  isAR           Boolean      @default(false)
  isGL           Boolean      @default(false)

  salesOrders    SalesOrder[]
  lineItems      SalesOrderLineItem[]
  taxes          Tax[]

  // Indexing for AR and GL accounts
  @@index([isAR, isGL])
}

model InventoryItem {
  id          String      @id @default(uuid())
  sku         String      @unique
  name        String
  description String
  unitPrice   Decimal     @db.Decimal(10, 2)
  quantity    Int         @default(0)

  lineItems   SalesOrderLineItem[]

  @@index([sku]) // Index on SKU for quick lookup
}

model SalesOrder {
  id                    String       @id @default(cuid())
  soNumber              String

  customerId            String?
  customer              Customer?    @relation(fields: [customerId], references: [id])
  oneTimeCustomerName   String?

  date                  DateTime     @default(now())
  customerPO            String?

  arAccountId           String
  arAccount             Account     @relation(fields: [arAccountId], references: [id], onDelete: Cascade)

  shipBy                DateTime?
  transactionType       TransactionType
  transactionOrigin     TransactionOrigin?
  shipVia               ShipVia?

  status                SalesOrderStatus   @default(DRAFT)
  lineItems             SalesOrderLineItem[]

  totalAmount           Decimal      @db.Decimal(10, 2)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  @@index([customerId, arAccountId, status]) // Indexing for performance optimization
}

model SalesOrderLineItem {
  id              String        @id @default(uuid())
  salesOrderId    String
  salesOrder      SalesOrder   @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)

  quantity        Int
  shipped         Int          @default(0)

  inventoryItemId String?
  inventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  description     String
  unitPrice       Decimal      @db.Decimal(10, 2)
  glAccountId     String
  glAccount       Account      @relation(fields: [glAccountId], references: [id], onDelete: Cascade)

  taxId           String?
  tax             Tax?         @relation(fields: [taxId], references: [id], onDelete: Cascade)

  project         String?
  phase           String?

  amount          Decimal      @db.Decimal(10, 2)

  @@index([salesOrderId, glAccountId, inventoryItemId]) // Index for fast retrieval
}


model Tax {
  id                  String        @id @default(uuid())
  taxType             String
  rate                Decimal      @db.Decimal(5, 2)          // Tax rate (percentage)
  taxAuthorityName    String?
  vendorOrCustomer    TaxParty
  vendorTaxOffice     String?

  glAccountId         String       // Foreign key to GL Account
  glAccount           Account      @relation(fields: [glAccountId], references: [id], onDelete: Cascade)

  lineItems           SalesOrderLineItem[]

  @@index([taxType, glAccountId])
}
